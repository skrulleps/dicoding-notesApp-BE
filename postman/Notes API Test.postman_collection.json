{
	"info": {
		"_postman_id": "8dabb7bb-b1d1-410e-a43d-9b1b830bd6a5",
		"name": "Notes API Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "42974945"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "Adding User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 201 value', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () =>{\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response Body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('success');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals('User berhasil ditambahkan');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body data should have userID property and not equal to empty', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { data } = responseJson;\r",
									"\r",
									"    pm.expect(data).to.ownProperty('userId');\r",
									"    pm.expect(data.userId).to.not.equals('');\r",
									"\r",
									"    pm.environment.set('currentUserId', data.userId);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{$timestamp}}-{{newUsername}}\",\r\n    \"password\": \"{{newPassword}}\",\r\n    \"fullname\": \"{{newFullname}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/users",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Adding User with Exist Username",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const postRequest = {\r",
									"    url: 'http://localhost:3000/users',\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            username: 'testing',\r",
									"            password: pm.environment.get('newPassword'),\r",
									"            fullname: pm.environment.get('newFullname')\r",
									"        }),\r",
									"    },\r",
									"};\r",
									"\r",
									"pm.sendRequest(postRequest, (error, response) => {\r",
									"    console.log(error ? error : response.json())\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 400 value', () => {\r",
									"   pm.response.to.have.status(400);\r",
									"}); \r",
									" \r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"}); \r",
									" \r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									" \r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									" \r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('fail');\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals('Gagal menambahkan user. Username sudah digunakan.');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"testing\",\r\n    \"password\": \"{{newPassword}}\",\r\n    \"fullname\": \"{{newFullname}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/users",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Adding User With Bad User Payload",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let badUserPayloads = pm.environment.get('badUserPayloads');\r",
									"\r",
									"if(!badUserPayloads || badUserPayloads.length === 0 ) {\r",
									"    badUserPayloads = [\r",
									"        { password: 'secret', fullname: 'John Doe'},\r",
									"        { username: 1, password: 'secret', fullname: 'John Doe'},\r",
									"        { username: 'johndoe', fullname: 'John Doe'},\r",
									"        { username: 'johndoe', password: true, fullname: 'John Doe'},\r",
									"        { username: 'johndoe', password: 'secret'},\r",
									"        { username: 'johndoe', password: 'secret', fullname: 0},\r",
									"    ]\r",
									"}\r",
									"\r",
									"const currentBadUserPayloads = badUserPayloads.shift();\r",
									"pm.environment.set('currentBadUserPayload', JSON.stringify(currentBadUserPayloads));\r",
									"pm.environment.set('badUserPayloads', badUserPayloads);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 400 value', () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('fail');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.not.equals(' ');\r",
									"    pm.expect(responseJson.message).to.not.equals(null);\r",
									"});\r",
									"\r",
									"const repeatRequestUntillDatasetEmpty = () => {\r",
									"    const badUserPayloads = pm.environment.get('badUSerPayloads');\r",
									"\r",
									"    if(badUserPayloads && badUserPayloads.length > 0) {\r",
									"        postman.setNextRequest('Adding User with Bad User Payload');\r",
									"    }\r",
									"}\r",
									"\r",
									"repeatRequestUntillDatasetEmpty();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{currentBadUserPayload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/users",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Getting User By Correct Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('success');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body data should contain user object', () => {\r",
									"    const {data} = pm.response.json();\r",
									"\r",
									"    pm.expect(data).to.ownProperty('user');\r",
									"    pm.expect(data.user).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('user object should contain only id, username, and fullname with correct value', () => {\r",
									"    const { data: { user } } = pm.response.json();\r",
									" \r",
									"    pm.expect(user).to.have.ownProperty('id');\r",
									"    pm.expect(user.id).to.equals(pm.environment.get('currentUserId'));\r",
									"    pm.expect(user).to.have.ownProperty('username');\r",
									"    pm.expect(user.username).to.includes(pm.environment.get('newUsername'));\r",
									"    pm.expect(user).to.have.ownProperty('fullname');\r",
									"    pm.expect(user.fullname).to.equals(pm.environment.get('newFullname'));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3000/users/{{currentUserId}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"users",
								"{{currentUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Getting User By Incorrect Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 404 value', () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('response COntent-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									" \r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									" \r",
									"    pm.expect(responseJson).to.have.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('fail');\r",
									"    pm.expect(responseJson).to.have.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals('User tidak ditemukan');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3000/users/xxxx",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"users",
								"xxxx"
							]
						}
					},
					"response": []
				},
				{
					"name": "Searcg Users by Username Related to Dicoding",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Menambahkan user dengan username dicoding\r",
									"const addDicodingUserRequest = {\r",
									"    method: 'POST',\r",
									"    url: 'http://localhost:3000/users',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            username: 'dicoding',\r",
									"            password: pm.environment.get('newPassword'),\r",
									"            fullname: 'Dicoding',\r",
									"        }),\r",
									"    },\r",
									"};\r",
									"\r",
									"pm.sendRequest(addDicodingUserRequest, (error, response) => {\r",
									"    console.log(error ? error : response);\r",
									"});\r",
									"\r",
									"// menambahkan user dengan username \"dicoding_indonesia\"\r",
									"const addDicodingIndonesiaUserRequest = {\r",
									"    method: 'POST',\r",
									"    url: 'http://localhost:3000/users',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            username: 'dicoding_indonesia',\r",
									"            password: pm.environment.get('newPassword'),\r",
									"            fullname: 'Dicoding Indonesia',\r",
									"        }),\r",
									"    },\r",
									"};\r",
									"\r",
									"pm.sendRequest(addDicodingIndonesiaUserRequest, (error, response) => {\r",
									"    console.log(error ? error : response);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status should be 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									" \r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									" \r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									" \r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									" \r",
									"    pm.expect(responseJson).to.have.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('success');\r",
									"    pm.expect(responseJson).to.have.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"});\r",
									" \r",
									"pm.test('response body data should contain users array', () => {\r",
									"    const { data } = pm.response.json();\r",
									" \r",
									"    pm.expect(data).to.have.ownProperty('users');\r",
									"    pm.expect(data.users).to.be.an('array');\r",
									"});\r",
									" \r",
									"pm.test('the array users should have contain 2 user object related to dicoding username', () => {\r",
									"    const { data: { users } } = pm.response.json();\r",
									" \r",
									"    pm.expect(users).to.have.lengthOf(2);\r",
									" \r",
									"    users.forEach((user) => {\r",
									"        pm.expect(user).to.be.an('object');\r",
									"        pm.expect(user).to.have.ownProperty('id');\r",
									"        pm.expect(user).to.have.ownProperty('username');\r",
									"        pm.expect(user).to.have.ownProperty('fullname');\r",
									"        pm.expect(user.username).to.include('dicoding');\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/users?username=dicoding",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"users"
							],
							"query": [
								{
									"key": "username",
									"value": "dicoding"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Authentications",
			"item": [
				{
					"name": "Post Authentication with Valid Credentials",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const postRequest = {\r",
									"    url: 'http://localhost:3000/users',\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            username: 'testing',\r",
									"            password: pm.environment.get('newPassword'),\r",
									"            fullname: pm.environment.get('newFullname')\r",
									"        }),\r",
									"    },\r",
									"};\r",
									"\r",
									"pm.sendRequest(postRequest, (error, response) => {\r",
									"    console.log(error ? error : response.json());\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 201 value', () => {\r",
									"   pm.response.to.have.status(201);\r",
									"}); \r",
									" \r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"}); \r",
									" \r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									" \r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									" \r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('success');\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals('Authentication berhasil ditambahkan');\r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"});\r",
									" \r",
									"pm.test('response body data should have property accessToken and refreshToken with correct value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { data } = responseJson;\r",
									" \r",
									"    pm.expect(data).to.have.ownProperty('accessToken');\r",
									"    pm.expect(data.accessToken).to.not.equals('');\r",
									"    pm.expect(data.accessToken).to.not.equals(null);\r",
									"    pm.expect(data).to.have.ownProperty('refreshToken');\r",
									"    pm.expect(data.refreshToken).to.not.equals('');\r",
									"    pm.expect(data.refreshToken).to.not.equals(null);\r",
									" \r",
									" \r",
									"    // menyimpan accessToken dan refreshToken di environment variable\r",
									"    pm.environment.set('accessToken', data.accessToken);\r",
									"    pm.environment.set('refreshToken', data.refreshToken);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"testing\",\r\n    \"password\": \"secretpassword\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/authentications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"authentications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post Authentication with Invalid Credential",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 401 value', () => {\r",
									"   pm.response.to.have.status(401);\r",
									"}); \r",
									" \r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"}); \r",
									" \r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									" \r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									" \r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('fail');\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals('Kredensial yang Anda berikan salah');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"testing\",\r\n    \"password\": \"somebadpassword\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/authentications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"authentications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Put Authentication with Valid Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"   pm.response.to.have.status(200);\r",
									"}); \r",
									" \r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"}); \r",
									" \r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									" \r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									" \r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('success');\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals('Access Token berhasil diperbarui');\r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"});\r",
									" \r",
									"pm.test('response body data should have property accessToken with correct value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { data } = responseJson;\r",
									" \r",
									"    pm.expect(data).to.have.ownProperty('accessToken');\r",
									"    pm.expect(data.accessToken).to.not.equals('');\r",
									"    pm.expect(data.accessToken).to.not.equals(null);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"refreshToken\": \"{{refreshToken}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/authentications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"authentications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Put Authentications with Invalid Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 400 value', () => {\r",
									"   pm.response.to.have.status(400);\r",
									"}); \r",
									" \r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"}); \r",
									" \r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									" \r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									" \r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('fail');\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals('Refresh token tidak valid');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"refreshToken\": \"xxxxx\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/authentications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"authentications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Authentication with Valid Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"   pm.response.to.have.status(200);\r",
									"}); \r",
									" \r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"}); \r",
									" \r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									" \r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									" \r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('success');\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals('Refresh token berhasil dihapus');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"refreshToken\": \"{{refreshToken}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/authentications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"authentications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Authentication with Invalid Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 400 value', () => {\r",
									"   pm.response.to.have.status(400);\r",
									"}); \r",
									" \r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"}); \r",
									" \r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									" \r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									" \r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('fail');\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals('Refresh token tidak valid');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"refreshToken\": \"xxxxx\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/authentications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"authentications"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Notes",
			"item": [
				{
					"name": "Adding Notes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 201 value', () => {\r",
									"   pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"}); \r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('success');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals('Catatan berhasil ditambahkan');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body data should have noteId property and not equal to empty', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { data } = responseJson;\r",
									" \r",
									"    pm.expect(data).to.ownProperty('noteId');\r",
									"    pm.expect(data.noteId).to.not.equals('');\r",
									" \r",
									"    pm.environment.set('noteId', data.noteId);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Catatan A\",\r\n    \"tags\": [\"Android\", \"Web\"],\r\n    \"body\": \"Isi dari Catatan A\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/notes",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Adding Notes with Bad Note Payload",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let badNotePayloads = pm.environment.get('badNotePayloads');\r",
									"\r",
									"if (!badNotePayloads || badNotePayloads.length === 0) {\r",
									"    // inisialisasi dengan sejumlah note yg tidak sesuai\r",
									"\r",
									"    badNotePayloads = [\r",
									"        { tags: [\"Android\", \"Web\"], body: \"Isi dari catatan A\"},\r",
									"        { title: 1, tags: [\"Android\", \"Web\"], body: \"Isi dari catatan A\" },\r",
									"        { title: \"Catatan A\", body: \"Isi dari catatan A\" },\r",
									"        { title: \"Catatan A\", tags: [1, \"2\"], body: \"Isi dari catatan A\" },\r",
									"        { title: \"Catatan A\", tags: [\"Android\", \"Web\"] },\r",
									"        { title: \"Catatan A\", tags: [\"Android\", \"Web\"], body: true }\r",
									"    ]\r",
									"}\r",
									"\r",
									"const currentBadNotePayload = badNotePayloads.shift();\r",
									"pm.environment.set('currentBadNotePayload', JSON.stringify(currentBadNotePayload));\r",
									"pm.environment.set('badNotePayloads', badNotePayloads);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 400 value', () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									" \r",
									"pm.test('response Content-Type header should have application/json; charset=utf-8 value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"}); \r",
									" \r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									" \r",
									"pm.test('response body object should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.haveOwnProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('fail');\r",
									"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
									"    pm.expect(responseJson.message).to.be.ok;\r",
									"});\r",
									"\r",
									"const repeatRequestUntilDatasetEmpty = () => {\r",
									"    const badNotePayloads = pm.environment.get('badNotePayloads');\r",
									"\r",
									"    if(badNotePayloads && badNotePayloads.length > 0) {\r",
									"        postman.setNextRequest('Adding Notes with Bad Note Payload');\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{currentBadNotePayload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/notes",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Getting All Notes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code should have 200 value\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response Content-Type header should have application/json value\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have the correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.have.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"\r",
									"    pm.expect(responseJson).to.have.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body data should have a notes array and contain at least 1 item', () => {\r",
									"   const responseJson = pm.response.json();\r",
									"   const { data } = responseJson;\r",
									" \r",
									"   pm.expect(data).to.have.ownProperty('notes');\r",
									"   pm.expect(data.notes).to.be.an('array');\r",
									"   pm.expect(data.notes.length).to.be.at.least(1);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3000/notes",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Getting Specified Notes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"  pm.response.to.have.status(200);\r",
									"}); \r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"   pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body shoukd be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should hyave the correct property and value', () => {\r",
									"\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.have.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('success');\r",
									"\r",
									"    pm.expect(responseJson).to.have.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('respoonse body data should contain note object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const {data} = responseJson;\r",
									"\r",
									"    pm.expect(data).to.have.ownProperty('note');\r",
									"    pm.expect(data).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('note object should contain correct value for id, title, body, and tags property', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const {data: {note}} = responseJson;\r",
									"\r",
									"    const expectedId = pm.environment.get('noteId');\r",
									"    const expectedTitle = 'Catatan A';\r",
									"    const expectedTags = ['Android', 'Web'];\r",
									"    const expectedBody = 'Isi dari Catatan A';\r",
									"\r",
									"  pm.expect(note).to.have.ownProperty('id');\r",
									"   pm.expect(note.id).to.equals(expectedId);\r",
									"\r",
									"   pm.expect(note).to.have.ownProperty('title');\r",
									"   pm.expect(note.title).to.equals(expectedTitle);\r",
									"\r",
									"   pm.expect(note).to.have.ownProperty('tags');\r",
									"   pm.expect(note.tags).to.eql(expectedTags);\r",
									"\r",
									"   pm.expect(note).to.have.ownProperty('body');\r",
									"   pm.expect(note.body).to.equals(expectedBody);\r",
									"\r",
									"   pm.expect(note).to.have.ownProperty('username');\r",
									"   pm.expect(note.username).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3000/notes/{{noteId}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notes",
								"{{noteId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Note",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									" \r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"   pm.expect(pm.response.headers.get('Content-Type')).to.equals(\"application/json; charset=utf-8\");\r",
									"})\r",
									" \r",
									"pm.test('response body should be an object', () => {\r",
									"   const responseJson = pm.response.json();\r",
									"   pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									" \r",
									"pm.test('response body should have correct property and value', () => {\r",
									"   const responseJson = pm.response.json();\r",
									" \r",
									"   pm.expect(responseJson).to.have.ownProperty('status');\r",
									"   pm.expect(responseJson.status).to.equals('success');\r",
									"   pm.expect(responseJson).to.have.ownProperty('message');\r",
									"   pm.expect(responseJson.message).to.equals('Catatan berhasil diperbarui');\r",
									"});\r",
									" \r",
									"pm.test('when request the updated note', () => {\r",
									"    const noteId = pm.environment.get('noteId');\r",
									"    const getRequest = {\r",
									"        url: `http://localhost:3306/notes/${noteId}`,\r",
									"        method: 'GET',\r",
									"        header: {\r",
									"            'Authorization': `Bearer ${pm.environment.get('accessToken')}`,\r",
									"        },\r",
									"    };\r",
									"    pm.sendRequest(getRequest, (error, response) => {\r",
									"        if(!error) {\r",
									"            pm.test('then the updated note should contain the latest data', () => {\r",
									"                const responseJson = response.json();\r",
									"                const { data: { note } } = responseJson;\r",
									" \r",
									"                const expectedTitle = 'Catatan A Revised';\r",
									"                const expectedTags = ['Android', 'Web'];\r",
									"                const expectedBody = 'Isi dari Catatan A Revised';\r",
									" \r",
									"                pm.expect(note.title).to.equals(expectedTitle);\r",
									"                pm.expect(note.tags).to.eql(expectedTags);\r",
									"                pm.expect(note.body).to.equals(expectedBody);\r",
									"            });\r",
									"        }\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Catatan A Revised\",\r\n    \"tags\": [\"Android\", \"Web\"],\r\n    \"body\": \"Isi dari Catatan A Revised\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/notes/{{noteId}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notes",
								"{{noteId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Note with Bad Note Payload",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let badNotePayloads = pm.environment.get('badNotePayloads');  // ini akan bertipe Array\r",
									" \r",
									"if (!badNotePayloads || badNotePayloads.length === 0) {\r",
									"    // inisialisasi dengan sejumlah note yang tidak sesuai\r",
									"    badNotePayloads = [\r",
									"        { tags: [\"Android\", \"Web\"], body: \"Isi dari catatan A\" },\r",
									"        { title: 1, tags: [\"Android\", \"Web\"], body: \"Isi dari catatan A\" },\r",
									"        { title: \"Catatan A\", body: \"Isi dari catatan A\" },\r",
									"        { title: \"Catatan A\", tags: [1, \"2\"], body: \"Isi dari catatan A\" },\r",
									"        { title: \"Catatan A\", tags: [\"Android\", \"Web\"] },\r",
									"        { title: \"Catatan A\", tags: [\"Android\", \"Web\"], body: true }\r",
									"    ]\r",
									"}\r",
									" \r",
									"const currentBadNotePayload = badNotePayloads.shift();  // hapus index 0, geser sisanya\r",
									"pm.environment.set('currentBadNotePayload', JSON.stringify(currentBadNotePayload));\r",
									"pm.environment.set('badNotePayloads', badNotePayloads);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 400 value', () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									" \r",
									"pm.test('response Content-Type header should have application/json; charset=utf-8 value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"}); \r",
									" \r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									" \r",
									"pm.test('response body object should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.haveOwnProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('fail');\r",
									"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
									"    pm.expect(responseJson.message).to.be.ok;\r",
									"});\r",
									" \r",
									"const repeatRequestUntilDatasetEmpty = () => {\r",
									"    const badNotePayloads = pm.environment.get('badNotePayloads');\r",
									" \r",
									"    if(badNotePayloads && badNotePayloads.length > 0) {\r",
									"        postman.setNextRequest('Update Note with Bad Note Payload');\r",
									"    }\r",
									"}\r",
									" \r",
									"repeatRequestUntilDatasetEmpty();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "file",
							"file": {
								"src": ""
							}
						},
						"url": {
							"raw": "localhost:3000/notes/{{noteId}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notes",
								"{{noteId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Note",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									" \r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8')\r",
									"});\r",
									" \r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									" \r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									" \r",
									"    pm.expect(responseJson).to.have.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('success');\r",
									"    pm.expect(responseJson).to.have.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals('Catatan berhasil dihapus');\r",
									"});\r",
									" \r",
									"pm.test('when request the deleted note', () => {\r",
									"    const noteId = pm.environment.get('noteId');\r",
									"    const getRequest = {\r",
									"        url: `http://localhost:3306/notes/${noteId}`,\r",
									"        method: 'GET',\r",
									"        header: {\r",
									"            'Authorization': `Bearer ${pm.environment.get('accessToken')}`,\r",
									"        },\r",
									"    };\r",
									"    pm.sendRequest(getRequest, (error, response) => {\r",
									"        if (!error) {\r",
									"            pm.test('the deleted note should be not found', () => {\r",
									"                pm.expect(response.code).to.equals(404);\r",
									"                const responseJson = response.json();\r",
									"                pm.expect(responseJson.status).to.equals('fail');\r",
									"                pm.expect(responseJson.message).to.equals('Catatan tidak ditemukan!');\r",
									"            });\r",
									"        }\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/notes/{{noteId}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notes",
								"{{noteId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Getting All Notes without Access Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 401 value', () => {\r",
									"   pm.response.to.have.status(401);\r",
									"}); \r",
									" \r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"}); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3000/notes",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notes"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Authorizations",
			"item": [
				{
					"name": "Adding Notes using User A",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 201 value', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"     pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body data should contain note id', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"\r",
									"    pm.expect(responseJson).to.have.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"\r",
									"    pm.expect(responseJson.data).to.have.ownProperty('noteId');\r",
									"    pm.expect(responseJson.data.noteId).to.be.a('string');\r",
									" \r",
									"    // memasukkan noteId ke dalam environment variable\r",
									"    pm.environment.set('noteIdUserA', responseJson.data.noteId);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenUserA}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Catatan A\",\r\n    \"tags\": [\"Android\", \"Web\"],\r\n    \"body\": \"Isi dari catatan A\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/notes",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Adding Notes using User B",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 201 value', () => {\r",
									"   pm.response.to.have.status(201);\r",
									"}); \r",
									" \r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									" \r",
									"pm.test('response body data should contains note id', () => {\r",
									"    const responseJson = pm.response.json();\r",
									" \r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson).to.have.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data).to.have.ownProperty('noteId');\r",
									"    pm.expect(responseJson.data.noteId).to.be.a('string');\r",
									" \r",
									"    // memasukkan noteId ke dalam environment variable\r",
									"    pm.environment.set('noteIdUserB', responseJson.data.noteId);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenUserB}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Catatan B\",\r\n    \"tags\": [\"Android\", \"Web\"],\r\n    \"body\": \"Isi dari catatan B\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/notes",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Getting All Notes using User A",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"   pm.response.to.have.status(200);\r",
									"}); \r",
									" \r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									" \r",
									"pm.test('response body data should contains notes array with 1 item', () => {\r",
									"    const responseJson = pm.response.json();\r",
									" \r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson).to.have.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data).to.have.ownProperty('notes');\r",
									"    pm.expect(responseJson.data.notes).to.be.an('array');\r",
									"    pm.expect(responseJson.data.notes).to.have.lengthOf(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenUserA}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/notes",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Getting All Notes using User B",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"   pm.response.to.have.status(200);\r",
									"}); \r",
									" \r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									" \r",
									"pm.test('response body data should contains notes array with 1 item', () => {\r",
									"    const responseJson = pm.response.json();\r",
									" \r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson).to.have.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data).to.have.ownProperty('notes');\r",
									"    pm.expect(responseJson.data.notes).to.be.an('array');\r",
									"    pm.expect(responseJson.data.notes).to.have.lengthOf(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenUserB}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/notes",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Getting Note Owned by User A using User A",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"   pm.response.to.have.status(200);\r",
									"}); \r",
									" \r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									" \r",
									"pm.test('response body data should contains object note', () => {\r",
									"    const responseJson = pm.response.json();\r",
									" \r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson).to.have.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data).to.have.ownProperty('note');\r",
									"    pm.expect(responseJson.data.note).to.be.an('object');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenUserA}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/notes/{{noteIdUserA}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notes",
								"{{noteIdUserA}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Getting Note Owned by User B using User B",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"   pm.response.to.have.status(200);\r",
									"}); \r",
									" \r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									" \r",
									"pm.test('response body data should contains object note', () => {\r",
									"    const responseJson = pm.response.json();\r",
									" \r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson).to.have.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data).to.have.ownProperty('note');\r",
									"    pm.expect(responseJson.data.note).to.be.an('object');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenUserB}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/notes/{{noteIdUserB}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notes",
								"{{noteIdUserB}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Getting Note Owned by User A using User B",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 403 value', () => {\r",
									"   pm.response.to.have.status(403);\r",
									"}); \r",
									" \r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									" \r",
									"pm.test('response body should contain correct value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									" \r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson).to.have.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('fail');\r",
									"    pm.expect(responseJson).to.have.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals('Anda tidak berhak mengakses resource ini');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenUserB}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/notes/{{noteIdUserA}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notes",
								"{{noteIdUserA}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Note Owned by User A using User A",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"   pm.response.to.have.status(200);\r",
									"}); \r",
									" \r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									" \r",
									"// tidak perlu melakukan uji pada nilai body response, karena sudah pernah diuji pada folder /notes"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenUserA}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Catatan A Revised\",\r\n    \"tags\": [\"Android\", \"Web\"],\r\n    \"body\": \"Isi dari Catatan A Revised\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/notes/{{noteIdUserA}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notes",
								"{{noteIdUserA}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Note Owned by User B using User B",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"   pm.response.to.have.status(200);\r",
									"}); \r",
									" \r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									" \r",
									"// tidak perlu melakukan uji pada nilai body response, karena sudah pernah diuji pada folder /notes"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenUserB}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Catatan B Revised\",\r\n    \"tags\": [\"Android\", \"Web\"],\r\n    \"body\": \"Isi dari Catatan B Revised\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/notes/{{noteIdUserB}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notes",
								"{{noteIdUserB}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Note Owned by User A using User B",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 403 value', () => {\r",
									"   pm.response.to.have.status(403);\r",
									"}); \r",
									" \r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									" \r",
									"pm.test('response body should contain correct value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									" \r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson).to.have.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('fail');\r",
									"    pm.expect(responseJson).to.have.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals('Anda tidak berhak mengakses resource ini');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenUserB}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Catatan A Revised Again\",\r\n    \"tags\": [\"Android\", \"Web\"],\r\n    \"body\": \"Isi dari Catatan A Revised Again\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/notes/{{noteIdUserA}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notes",
								"{{noteIdUserA}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Note Owned by User A using User B",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 403 value', () => {\r",
									"   pm.response.to.have.status(403);\r",
									"}); \r",
									" \r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									" \r",
									"pm.test('response body should contain correct value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									" \r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson).to.have.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('fail');\r",
									"    pm.expect(responseJson).to.have.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals('Anda tidak berhak mengakses resource ini');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenUserB}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/notes/{{noteIdUserA}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notes",
								"{{noteIdUserA}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Note Owned by User A using User A",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"   pm.response.to.have.status(200);\r",
									"}); \r",
									" \r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									" \r",
									"// tidak perlu melakukan uji pada nilai body response, karena sudah pernah diuji pada folder /notes"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenUserA}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/notes/{{noteIdUserA}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notes",
								"{{noteIdUserA}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Note Owned by User B using User B",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"   pm.response.to.have.status(200);\r",
									"}); \r",
									" \r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									" \r",
									"// tidak perlu melakukan uji pada nilai body response, karena sudah pernah diuji pada folder /notes"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenUserB}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/notes/{{noteIdUserB}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notes",
								"{{noteIdUserB}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Membuat User A\r",
							"const createUserARequest = {\r",
							"    url: 'http://localhost:3000/users',\r",
							"    method: 'POST',\r",
							"    header: {\r",
							"        'Content-Type': 'application/json',\r",
							"    },\r",
							"    body: {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({\r",
							"            username: 'user_a',\r",
							"            password: 'secret',\r",
							"            fullname: 'User A',\r",
							"        }),\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.sendRequest(createUserARequest, (error, response) => {\r",
							"    console.log('Create User A:', error || response.json());\r",
							"\r",
							"    const loginUserRequest = {\r",
							"        url: 'http://localhost:3000/authentications',\r",
							"        method: 'POST',\r",
							"        header: {\r",
							"            'Content-Type': 'application/json',\r",
							"        },\r",
							"        body: {\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify({\r",
							"                username: 'user_a',\r",
							"                password: 'secret',\r",
							"            })\r",
							"        }\r",
							"    };\r",
							"\r",
							"    pm.sendRequest(loginUserRequest, (error, response) => {\r",
							"        if (!error) {\r",
							"            const json = response.json();\r",
							"            if (json?.data?.accessToken) {\r",
							"                pm.environment.set('accessTokenUserA', json.data.accessToken);\r",
							"            } else {\r",
							"                console.log('Login User A gagal:', json);\r",
							"            }\r",
							"        } else {\r",
							"            console.log('Error login User A:', error);\r",
							"        }\r",
							"    });\r",
							"});\r",
							"\r",
							"// Membuat User B\r",
							"const createUserBRequest = {\r",
							"    url: 'http://localhost:3000/users',\r",
							"    method: 'POST',\r",
							"    header: {\r",
							"        'Content-Type': 'application/json',\r",
							"    },\r",
							"    body: {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({\r",
							"            username: 'user_b',\r",
							"            password: 'secret',\r",
							"            fullname: 'User B',\r",
							"        }),\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.sendRequest(createUserBRequest, (error, response) => {\r",
							"    console.log('Create User B:', error || response.json());\r",
							"\r",
							"    const loginUserRequest = {\r",
							"        url: 'http://localhost:3000/authentications',\r",
							"        method: 'POST',\r",
							"        header: {\r",
							"            'Content-Type': 'application/json',\r",
							"        },\r",
							"        body: {\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify({\r",
							"                username: 'user_b',\r",
							"                password: 'secret',\r",
							"            })\r",
							"        }\r",
							"    };\r",
							"\r",
							"    pm.sendRequest(loginUserRequest, (error, response) => {\r",
							"        if (!error) {\r",
							"            const json = response.json();\r",
							"            if (json?.data?.accessToken) {\r",
							"                pm.environment.set('accessTokenUserB', json.data.accessToken);\r",
							"            } else {\r",
							"                console.log('Login User B gagal:', json);\r",
							"            }\r",
							"        } else {\r",
							"            console.log('Error login User B:', error);\r",
							"        }\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			]
		},
		{
			"name": "Collaborations",
			"item": [
				{
					"name": "Adding Note using Owner User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 201 value', () => {\r",
									"   pm.response.to.have.status(201);\r",
									"}); \r",
									" \r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									" \r",
									"pm.test('response body data should contains note id', () => {\r",
									"    const responseJson = pm.response.json();\r",
									" \r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson).to.have.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data).to.have.ownProperty('noteId');\r",
									"    pm.expect(responseJson.data.noteId).to.be.a('string');\r",
									" \r",
									"    // memasukkan noteId ke dalam environment variable\r",
									"    pm.environment.set('ownerNoteId', responseJson.data.noteId);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{ownerAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Catatan A\",\r\n    \"tags\": [\"Android\", \"Web\"],\r\n    \"body\": \"Isi dari catatan A\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/notes",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Adding Collaborator User as Collaborator to Adding Note",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 201 value', () => {\r",
									"   pm.response.to.have.status(201);\r",
									"}); \r",
									" \r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									" \r",
									"pm.test('response body data should have collaborationId', () => {\r",
									"    const responseJson = pm.response.json();\r",
									" \r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson).to.have.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data).to.have.ownProperty('collaborationId');\r",
									"    pm.expect(responseJson.data.collaborationId).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{ownerAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"noteId\": \"{{ownerNoteId}}\",\r\n    \"userId\": \"{{collaboratorUserId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/collaborations",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"collaborations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Getting All Notes using Collaborator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"   pm.response.to.have.status(200);\r",
									"}); \r",
									" \r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									" \r",
									"pm.test('response body data should contains notes array with 1 item', () => {\r",
									"    const responseJson = pm.response.json();\r",
									" \r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson).to.have.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data).to.have.ownProperty('notes');\r",
									"    pm.expect(responseJson.data.notes).to.be.an('array');\r",
									"    pm.expect(responseJson.data.notes).to.have.lengthOf(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{collaboratorAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/notes",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Getting Added Note using Collaborator User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"   pm.response.to.have.status(200);\r",
									"}); \r",
									" \r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									" \r",
									"// tidak perlu melakukan uji pada nilai body response, karena sudah pernah diuji pada folder /notes"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{collaboratorAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/notes/{{ownerNoteId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notes",
								"{{ownerNoteId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editing Added Note using Collaborator User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"   pm.response.to.have.status(200);\r",
									"}); \r",
									" \r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									" \r",
									"// tidak perlu melakukan uji pada nilai body response, karena sudah pernah diuji pada folder /notes"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{collaboratorAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Catatan A Revised\",\r\n    \"tags\": [\"Android\", \"Web\"],\r\n    \"body\": \"Isi dari Catatan A Revised by collaborator\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/notes/{{ownerNoteId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notes",
								"{{ownerNoteId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deleting Added Note using Collaborator User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 403 value', () => {\r",
									"   pm.response.to.have.status(403);\r",
									"}); \r",
									" \r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									" \r",
									"pm.test('response body should contain correct value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									" \r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson).to.have.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('fail');\r",
									"    pm.expect(responseJson).to.have.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals('Anda tidak berhak mengakses resource ini');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{collaboratorAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/notes/{{ownerNoteId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notes",
								"{{ownerNoteId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Collaborator User from Collaborator to Added Note",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"   pm.response.to.have.status(200);\r",
									"}); \r",
									" \r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									" \r",
									"pm.test('response body data should contains correct value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    console.log(responseJson);\r",
									" \r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson).to.have.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('success');\r",
									"    pm.expect(responseJson).to.have.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals('Kolaborasi berhasil dihapus');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{ownerAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"noteId\": \"{{ownerNoteId}}\",\r\n    \"userId\": \"{{collaboratorUserId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/collaborations",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"collaborations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Adding Collaborator User as Collaborator to Added Note using Collaborator User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 403 value', () => {\r",
									"   pm.response.to.have.status(403);\r",
									"}); \r",
									" \r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									" \r",
									"pm.test('response body should contain correct value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									" \r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson).to.have.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('fail');\r",
									"    pm.expect(responseJson).to.have.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals('Anda tidak berhak mengakses resource ini');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{collaboratorAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"noteId\": \"{{ownerNoteId}}\",\r\n    \"userId\": \"{{collaboratorUserId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/collaborations",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"collaborations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Getting All Notes using Collaborator User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"   pm.response.to.have.status(200);\r",
									"}); \r",
									" \r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									" \r",
									"pm.test('response body data should contains notes array with 0 item', () => {\r",
									"    const responseJson = pm.response.json();\r",
									" \r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson).to.have.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data).to.have.ownProperty('notes');\r",
									"    pm.expect(responseJson.data.notes).to.be.an('array');\r",
									"    pm.expect(responseJson.data.notes).to.have.lengthOf(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{collaboratorAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/notes",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Gerring Added Note using Collaborator User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 403 value', () => {\r",
									"   pm.response.to.have.status(403);\r",
									"}); \r",
									" \r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									" \r",
									"pm.test('response body should contain correct value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									" \r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson).to.have.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('fail');\r",
									"    pm.expect(responseJson).to.have.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals('Anda tidak berhak mengakses resource ini');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{collaboratorAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/notes/{{ownerNoteId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notes",
								"{{ownerNoteId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editing Added Note using Collaborator User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 403 value', () => {\r",
									"   pm.response.to.have.status(403);\r",
									"}); \r",
									" \r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									" \r",
									"pm.test('response body should contain correct value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									" \r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson).to.have.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('fail');\r",
									"    pm.expect(responseJson).to.have.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals('Anda tidak berhak mengakses resource ini');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{collaboratorAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Catatan A Revised\",\r\n    \"tags\": [\"Android\", \"Web\"],\r\n    \"body\": \"Isi dari Catatan A Revised by collaborator\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/notes/{{ownerNoteId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notes",
								"{{ownerNoteId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deleting Added Note using Owner User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									" \r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8')\r",
									"});\r",
									" \r",
									"// tidak perlu melakukan uji pada nilai body response, karena sudah pernah diuji pada folder /notes"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{ownerAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/notes/{{ownerNoteId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notes",
								"{{ownerNoteId}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const createOwnerUserRequest = {\r",
							"    url: 'http://localhost:3000/users',\r",
							"    method: 'POST',\r",
							"    header: {\r",
							"        'Content-Type': 'application/json',\r",
							"    },\r",
							"    body: {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({\r",
							"            username: 'owner_user',\r",
							"            password: 'secret',\r",
							"            fullname: 'Owner',\r",
							"        }),\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.sendRequest(createOwnerUserRequest, (error, response) => {\r",
							"    console.log(error ? error : response);\r",
							"\r",
							"    // Setelah terdaftar, login dengan owner User\r",
							"    const loginOwnerUserRequest = {\r",
							"        url: 'http://localhost:3000/authentications',\r",
							"        method: 'POST',\r",
							"        header: {\r",
							"            'Content-Type': 'application/json',\r",
							"        },\r",
							"        body: {\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify({\r",
							"                username: 'owner_user',\r",
							"                password: 'secret',\r",
							"            })\r",
							"        }\r",
							"    };\r",
							"\r",
							"    pm.sendRequest(loginOwnerUserRequest, (error, response) => {\r",
							"        console.log(error ? error : response);\r",
							"        // Simpan token ke environment variable\r",
							"        if (!error) {\r",
							"            const {data: {accessToken}} = response.json();\r",
							"            pm.environment.set('ownerAccessToken', accessToken);\r",
							"        }\r",
							"    })\r",
							"});\r",
							"\r",
							"// Membuat collaborator user\r",
							"const createCollaboratorUserRequest = {\r",
							"    url: 'http://localhost:3000/users',\r",
							"    method: 'POST',\r",
							"    header: {\r",
							"        'Content-Type': 'application/json',\r",
							"    },\r",
							"    body: {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({\r",
							"            username: 'collaborator_user',\r",
							"            password: 'secret',\r",
							"            fullname: 'Collaborator',\r",
							"        }),\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.sendRequest(createCollaboratorUserRequest, (error, response) => {\r",
							"    console.log(error ? error : response);\r",
							"\r",
							"    if (!error) {\r",
							"        if (response.code === 201) {\r",
							"            // memasukkan id collaborator user ke environment variabel\r",
							"            const { data : { userId } } = response.json();\r",
							"            pm.environment.set('collaboratorUserId', userId);\r",
							"        }\r",
							"    }\r",
							"\r",
							"    // Setelah terdaftar, login dengan collaborator User\r",
							"    const loginCollaboratorUserRequest = {\r",
							"        url: 'http://localhost:3000/authentications',\r",
							"        method: 'POST',\r",
							"        header: {\r",
							"            'Content-Type': 'application/json',\r",
							"        },\r",
							"        body: {\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify({\r",
							"                username: 'collaborator_user',\r",
							"                password: 'secret',\r",
							"            })\r",
							"        }\r",
							"    };\r",
							"\r",
							"    pm.sendRequest(loginCollaboratorUserRequest, (error, response) => {\r",
							"        console.log(error ? error : response);\r",
							"        // Simpan token ke environment variable\r",
							"        if (!error) {\r",
							"            const {data: {accessToken}} = response.json();\r",
							"            pm.environment.set('collaboratorAccessToken', accessToken);\r",
							"        }\r",
							"    })\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			]
		},
		{
			"name": "Exports",
			"item": [
				{
					"name": "Exports Notes with Valid Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response code should have 201 value', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have the correct property and value',() => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.have.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('success');\r",
									"    \r",
									"    pm.expect(responseJson).to.have.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals('Permintaan Anda dalam antrean');\r",
									"})\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenUserA}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"targetEmail\": \"tuhairifadhlan@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/export/notes",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"export",
								"notes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Exports Notes with Bad Payloads",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let badExportPayloads = pm.environment.get('badExportPayloads');\r",
									"\r",
									"if (!badExportPayloads || badExportPayloads.length === 0) {\r",
									"    badExportPayloads = [\r",
									"        {},\r",
									"        { targetEmail: true},\r",
									"        { targetEmail: 0 },\r",
									"        {targetEmail: ''},\r",
									"        { targetEmail: 'John' },\r",
									"        { targetEmail: 'qwert123' },\r",
									"    ];\r",
									"}\r",
									"\r",
									"const currentBadExportPayloads = badExportPayloads.shift();\r",
									"pm.environment.set('currentBadExportPayloads', JSON.stringify(currentBadExportPayloads));\r",
									"pm.environment.set('badExportPayloads', badExportPayloads);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response code should have 400 value', () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									" \r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									" \r",
									"pm.test('response body should be an object', () => {\r",
									"   const responseJson = pm.response.json();\r",
									"   pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									" \r",
									"pm.test('response body should have the correct property and value', () => {\r",
									"   const responseJson = pm.response.json();\r",
									" \r",
									"   pm.expect(responseJson).to.have.ownProperty('status');\r",
									"   pm.expect(responseJson.status).to.equals('fail');\r",
									"   pm.expect(responseJson).to.have.ownProperty('message');\r",
									"   pm.expect(responseJson.message).to.be.a('string');\r",
									"});\r",
									"\r",
									"const repeatRequestUntillDatasetEmpty = () => {\r",
									"    const badExportPayloads = pm.environment.get('badExportPayloads');\r",
									"\r",
									"    if(badExportPayloads && badExportPayloads.length > 0 ) {\r",
									"        postman.setNextRequest('Export Notes with Bad Payloads');\r",
									"    }\r",
									"}\r",
									"\r",
									"repeatRequestUntillDatasetEmpty();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenUserA}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{currentBadExportPayloads}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/export/notes",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"export",
								"notes"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// membuat User A \r",
							"const createUserARequest = {\r",
							"    url: 'http://localhost:3000/users',\r",
							"    method: 'POST',\r",
							"    header: {\r",
							"        'Content-Type': 'application/json',\r",
							"    },\r",
							"    body: {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({\r",
							"            username: 'user_a',\r",
							"            password: 'secret',\r",
							"            fullname: 'User A',\r",
							"        }),\r",
							"    },\r",
							"};\r",
							" \r",
							"pm.sendRequest(createUserARequest, (error, response) => {\r",
							"    console.log(error ? error : response);\r",
							" \r",
							"    // Setelah terdaftar, login dengan User A\r",
							"    const loginUserRequest = {\r",
							"        url: 'http://localhost:3000/authentications',\r",
							"        method: 'POST',\r",
							"        header: {\r",
							"            'Content-Type': 'application/json',\r",
							"        },\r",
							"        body: {\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify({\r",
							"                username: 'user_a',\r",
							"                password: 'secret',\r",
							"            }),\r",
							"        },\r",
							"    };\r",
							" \r",
							"    pm.sendRequest(loginUserRequest, (error, response) => {\r",
							"        if (!error) {\r",
							"            // memasukkan access token User A ke environment variabel\r",
							"            const { data: { accessToken } } = response.json();\r",
							"            pm.environment.set('accessTokenUserA', accessToken);\r",
							"        }\r",
							"    });\r",
							"});\r",
							"\r",
							"// // mmebuat User A\r",
							"// const createUserARequest = {\r",
							"//     url: 'http://localhost:3000/users',\r",
							"//     method: 'POST',\r",
							"//     header: {\r",
							"//         'Content-Type': 'application/json',\r",
							"//     },\r",
							"//     body:{\r",
							"//         mode: 'raw',\r",
							"//         raw: JSON.stringify({\r",
							"//             username: 'userA',\r",
							"//             password: 'secret',\r",
							"//             fullName: 'User A',\r",
							"//         })\r",
							"//     }\r",
							"// }\r",
							"\r",
							"// pm.sendRequest(createUserARequest, (error, response) => {\r",
							"//     console.log(error ? error : response);\r",
							"\r",
							"//     // Setelah terdaftar, login dengan User A\r",
							"//     const loginUserARequest = {\r",
							"//         url: 'http://localhost:3000/authentications',\r",
							"//         method: 'POST',\r",
							"//         header: {\r",
							"//             'Content-Type': 'application/json',\r",
							"//         },\r",
							"//         body: {\r",
							"//             mode: 'raw',\r",
							"//             raw: JSON.stringify({\r",
							"//                 username: 'userA',\r",
							"//                 password: 'secret',\r",
							"//             })\r",
							"//         }\r",
							"//     }\r",
							"\r",
							"//     pm.sendRequest(loginUserARequest, (error, response) => {\r",
							"//         if (!error) {\r",
							"//             // memasukkan access token User A ke environment variabel\r",
							"//             const { data: { accessToken } } = response.json();\r",
							"//             console.log(data, \"response\", response.json());\r",
							"//             pm.environment.set('accessTokenUserA', accessToken);\r",
							"//         }\r",
							"//     });\r",
							"// })\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			]
		},
		{
			"name": "Uploads",
			"item": [
				{
					"name": "Upload Image",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status should be 201', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response should contains fileLocation in body data response', () => {\r",
									"    const responseJson = pm.response.json();\r",
									" \r",
									"    pm.expect(responseJson).to.have.ownProperty('status');\r",
									"    pm.expect(responseJson).to.have.ownProperty('data');\r",
									" \r",
									"    pm.expect(responseJson.status).to.equals('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									" \r",
									"    const { data } = responseJson;\r",
									" \r",
									"    pm.expect(data).to.have.ownProperty('fileLocation');\r",
									"    pm.expect(data.fileLocation).to.be.a('string');\r",
									"    pm.expect(data.fileLocation).to.not.equals('');\r",
									" \r",
									"    // memasukkan fileLocation ke environment variable\r",
									"    pm.environment.set('fileLocation', data.fileLocation);\r",
									"});\r",
									"\r",
									"pm.test('when requesting the fileLocation', () => {\r",
									"    const fileLocation = pm.environment.get('fileLocation');\r",
									" \r",
									"    pm.sendRequest(fileLocation, (_, response) => {\r",
									"        pm.test('response code should be 200', () => {\r",
									"            pm.expect(response.code).to.equals(200);\r",
									"        })\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "d:\\MATA KULIAH\\STUPEN DICODING\\Coding\\Backend\\notes\\flower.jpg"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/upload/images",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"upload",
								"images"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload Image with Non-Image File",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response code should have 400 value', () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									" \r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									" \r",
									"pm.test('response body should have the correct property and value', () => {\r",
									"   const responseJson = pm.response.json();\r",
									" \r",
									"   pm.expect(responseJson).to.have.ownProperty('status');\r",
									"   pm.expect(responseJson.status).to.equals('fail');\r",
									"   pm.expect(responseJson).to.have.ownProperty('message');\r",
									"   pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "c:\\Users\\fadhl\\OneDrive\\Documents\\UAS_1122140146_MochFadhlanTuhairi.pdf"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/upload/images",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"upload",
								"images"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}